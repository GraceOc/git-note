
(一)安装git

(二)配置全局信息
	配置用户名 git config --global user.name "用户名"
	配置邮箱 git config --global user.email "邮箱地址"
	查看配置 git config --list      --global表示全局配置

概念
   工作区: 即写代码的文件根目录  提交过程: 工作区=>暂存区=>仓库(只有到仓库才能被git管理)


(三)重要命令
    cd +目录名称  切换到将要被git管理的目录

    git init  初始化仓库 会生成一个.git的隐藏目录(里面的内容不要修改) 字符U

    git add 文件路径(如index.html)   将指定文件添加到暂存区 字符A
    git add --all 或 git add -A     添加所有文件到暂存区  A

    git commit -m "提交说明"   将暂存区的所有文件提交到仓库(只能提交所有) 无字符

    git status 查看文件当前的状态

(四)其他命令
    git log   查看详细提交信息
    cat +文件名   查看文件全部内容

    查看所有版本: git log --pretty  或 git log --pretty=online
    版本回退: git reset --hard 版本号  回到之前版本的状态
	      git reset --hard head^   回到上一次的状态
              git reset --hard head~3  回到第三个版本


(五)文件的状态说明(在编辑器里能看到)
     U: 文件还未添加到暂存区(文件没有被合并)

     A: 文件已被添加到暂存区（服务器上没有）

     M: 文件内容被修改或mode被修改
    
     无字符: 项目未初始化或者文件已被提交到仓库

     C: 文件的一个新拷贝.

     D: 你本地删除的文件（服务器上还在）.

     R: 文件名被修改了。

     T: 文件的类型被修改了。

     X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。


(六)分支
    
     查看分支: git branch  当前分支会有一个*

     创建分支: git branch 分支名称   

     切换分支: git checkout 分支名称

     合并分支: git merge 分支名称     即将其他分支合并到当前分支,此时被合并的分支和当前分支都拥有相同的内容

     删除分支: git branch -d 分支名称

     注意: 当两个分支存在文件重名时会造成冲突,此时需要根据情况保留更改 报错:CONFLICT (content): Merge conflict in xxx 解决冲突后需要提交才能下一步操作


(七)创建本地裸仓库(裸仓库就是文件夹) 方便共享,方便他人拉取
    首次使用仓库:
          创建裸仓库: git clone --bare 需要共享的文件夹 裸仓库的名称.git

          从裸仓库中获取内容: git clone 裸仓库名.git 新仓库名
 
    再次使用仓库:
          (1)原文件有修改 需要 git add --all  git commit -m "" 提交到仓库

          (2) 在原文件目录下操作 git push ../裸仓库名.git master
        
          (3) 在新仓库目录下操作 git pull ../裸仓库名.git master

     {1}.创建的裸仓库会比原文件多出一些文件,但从裸仓库获取到的内容与原文件夹的内容是一样的
     {2}.如果更新内容,必须将修改后的内容更新(push)到裸仓库,才能确保一致

     例子:  (1)当前目录为test
            (2)git clone --bare test mytest.git 
            (3)git clone mytest.git newtest
            (4)此时test的内容被修改
            (5)在test目录下 git add -A   git commit -m ""
            (6)在test目录下 git push ../mytest.git master(分支名)
            (7)cd ../newtest
            (8)在newtest目录下 git pull ../mytest.git master
            ...此时被修改的内容已拉取到newtest


(八)使用github  将项目存放到远程仓库
       A. git init 

       B.生成公钥,在使用github提交或和拉取文件前需要生成公钥
          (1).获取公钥:在github中创建好一个仓库后会默认在本地生成一个文件,该文件是用来配置公钥的 计算机->用户->admin->.ssh(里面有公钥私钥)
          (2).将里面的 id-rea.pub(公钥)用记事本打开后将里面的内容复制到github=>setting=>SSH and GPG keys=>new ssh key中生成即可,此后便能操作远程仓库
	  (3).以上两个步骤可是使用命令行获取公钥然后再制作 cd ~/.ssh =>ls -al => cat id_rea.pub
       
       C.拉取项目: git pull 远程仓库地址 master
                   或 git clone 远程仓库地址 (不使用密钥也能成功)

         上传提交: git push 远程仓库地址 master(master可以不写)
   
       D.报错解决: 如果在github创建仓库的时候选择了Initialize this repository with a README(初始化储存库和readme)这一选项时,在仓库中会默认生成一个md文档,所以当push项目的时候会造成版本冲突,此时应先pull仓库后add 和 commit 后再push项目






